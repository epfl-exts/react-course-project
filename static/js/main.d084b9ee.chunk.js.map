{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Controls","_ref2","theCanvas","model","_useState","useState","_useState2","Object","slicedToArray","prediction","setLabel","predictedLabel","react_default","a","createElement","onClick","canvas","current","getContext","fillRect","height","width","tensor","tf","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","result","predict","data","arr","length","max","maxIndex","i","indexOfMax","SVG","label","_ref3","colors","letters","toUpperCase","split","map","letter","rand","Math","floor","random","fill","key","id","x","y","fontSize","fontFamily","Canvas","React","forwardRef","props","ref","lastX","lastY","mouseDown","useEffect","context","fillStyle","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","_drawLine","ctx","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","_drawLine2","handleMousemove","App","_ref","createRef","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d084b9ee.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nfunction App({ model }) {\n  let ref = React.createRef();\n\n  return (\n    <div className=\"App\">\n      <Canvas ref={ref} />\n      <Controls theCanvas={ref} model={model} />\n    </div>\n  );\n}\n\nfunction Controls({ theCanvas, model }) {\n  let [prediction, setLabel] = useState(\"\"); // Sets default label to empty string.\n\n  const labels = [\n    \"bird\",\n    \"book\",\n    \"car\",\n    \"cat\",\n    \"chair\",\n    \"flower\",\n    \"plane\",\n    \"sheep\",\n    \"ship\",\n    \"strawberry\"\n  ];\n  const predictedLabel = labels[prediction];\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          const canvas = theCanvas.current;\n          const ctx = canvas.getContext(\"2d\");\n          ctx.fillRect(0, 0, canvas.height, canvas.width);\n        }}\n      >\n        Clear the canvas.\n      </button>\n      <button\n        onClick={() => {\n          const tensor = preprocessCanvas(theCanvas.current);\n          const prediction = model.then(result =>\n            result.predict(tensor).data()\n          );\n          prediction.then(result => setLabel(indexOfMax(result)));\n        }}\n      >\n        Predict the drawing.\n      </button>\n      <SVG label={predictedLabel} />\n    </div>\n  );\n}\n\nfunction preprocessCanvas(canvas) {\n  // resize the input image to CNN's target size of (1, 28, 28)\n  let tensor = tf\n    .fromPixels(canvas)\n    .resizeNearestNeighbor([28, 28])\n    .mean(2)\n    .expandDims(2)\n    .expandDims()\n    .toFloat();\n  return tensor.div(255.0);\n}\n\nfunction indexOfMax(arr) {\n  if (arr.length === 0) {\n    return -1;\n  }\n\n  var max = arr[0];\n  var maxIndex = 0;\n\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      maxIndex = i;\n      max = arr[i];\n    }\n  }\n\n  return maxIndex;\n}\n\nfunction SVG({ label }) {\n  const colors = [\"#f54123\", \"#37bbe4\", \"f45844\", \"3dbd5d\", \"ee8012\"];\n  const letters =\n    label &&\n    label\n      .toUpperCase()\n      .split(\"\")\n      .map((letter, i) => {\n        const rand = Math.floor(Math.random() * Math.floor(colors.length - 1));\n        const fill = colors[rand];\n\n        return (\n          <tspan key={i} fill={fill}>\n            {letter}\n          </tspan>\n        );\n      });\n\n  return (\n    <svg id=\"prediction\" width=\"300\" height=\"150\">\n      <text x=\"15\" y=\"90\" fontSize=\"64px\" fontFamily=\"'Leckerli One', cursive\">\n        {letters}\n      </text>\n    </svg>\n  );\n}\n\nconst Canvas = React.forwardRef((props, ref) => {\n  let mouseDown = false;\n  let lastX;\n  let lastY;\n\n  const handleMouseup = () => {\n    mouseDown = false;\n    [lastX, lastY] = [undefined, undefined];\n  };\n\n  const handleMousemove = e => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.height, canvas.width);\n  });\n\n  return (\n    <canvas\n      height={300}\n      width={300}\n      ref={ref}\n      onMouseDown={() => (mouseDown = true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={e => handleMousemove(e)}\n    />\n  );\n});\n\nfunction drawLine(canvas, x, y, lastX, lastY) {\n  let ctx = canvas.getContext(\"2d\");\n\n  ctx.strokeStyle = \"#000000\";\n  ctx.lineWidth = 12;\n  ctx.lineJoin = \"round\";\n\n  ctx.beginPath();\n  ctx.moveTo(lastX, lastY);\n  ctx.lineTo(x, y);\n  ctx.closePath();\n  ctx.stroke();\n\n  return [x, y];\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst model = tf.loadModel(\n  \"https://gist.githubusercontent.com/xaris/d27a1c180134d00f96c34238f2e82e03/raw/8b3826daed80cd46c1c310efc3c550ed06872fb7/model.json\"\n);\n\nReactDOM.render(<App model={model} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}